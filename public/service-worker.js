// service worker is javascript file that run every time.It keeps running even you close the browser.Due to this we can send push notification,offline mode.

// Decalre array of files to cache 
const FILES_TO_CACHE = [
  "/",
  "/home",
  "/detail",
  "/favorites",
  "/manifest.json",
  "/favicon.ico",
  "/assets/css/style.css",

  // cache the bundles generated by webpack
  "/dist/app.bundle.js",
  "/dist/detail.bundle.js",
  "/dist/favorites.bundle.js",

  "https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.3.1/materia/bootstrap.css",
  "https://use.fontawesome.com/releases/v5.8.2/css/all.css",
  "/assets/images/1.jpg",
  "/assets/images/2.jpg",
  "/assets/images/3.jpg",
  "/assets/images/4.jpg",
  "/assets/images/5.jpg",
  "/assets/images/6.jpg",
  "/assets/images/7.jpg",
  "/assets/images/8.jpg",
  "/assets/images/9.jpg",
  "/assets/images/10.jpg",
  "/assets/images/11.jpg",
  "/assets/images/12.jpg",
  "/assets/images/13.jpg",
  "/assets/images/14.jpg",
  "/assets/images/15.jpg",
  "/assets/images/16.jpg",
  "/assets/images/17.jpg",
  "/assets/images/18.jpg",
  "/assets/images/19.jpg",
  "/assets/images/Milli-Video.mp4"
];

//Declare cache names
const STATIC_CACHE = "static-cache-v1";
const RUNTIME_CACHE = "runtime-cache";

//Once Service-Worker "install" is called, first open the static cache and store all files in the FILES_TO_CACHE Variable
self.addEventListener("install", event => {
  event.waitUntil(
    caches
      .open(STATIC_CACHE)
      .then(cache => cache.addAll(FILES_TO_CACHE))
      .then(() => self.skipWaiting())
  );
});

// The activate handler takes care of cleaning up old caches.
self.addEventListener("activate", event => {
  const currentCaches = [STATIC_CACHE, RUNTIME_CACHE];
  event.waitUntil(
    caches
      .keys()
      .then(cacheNames => {
        // return array of cache names that are old to delete
        return cacheNames.filter(
          cacheName => !currentCaches.includes(cacheName)
        );
      })
      .then(cachesToDelete => {
        return Promise.all(
          cachesToDelete.map(cacheToDelete => {
            return caches.delete(cacheToDelete);
          })
        );
      })
      .then(() => self.clients.claim())
  );
});


//Intercept appropriate requests and allow others to be handled normaly
self.addEventListener("fetch", event => {
  // non GET requests are not cached and requests to other origins are not cached
  if(
    event.request.method !== "GET" ||
    !event.request.url.startsWith(self.location.origin) ||
    event.request.url.includes("/login") ||
    event.request.url.includes("/logout") ||
    event.request.url.includes("/callback") ||
    event.request.url.includes("/https://dev-txg650li.us.auth0.com/") 
  ) {
    event.respondWith(fetch(event.request));
    return;
  }

  // handle runtime GET requests for data from /api routes
  if (event.request.url.includes("/api/images")) {
    // make network request and fallback to cache if network request fails (offline)
    event.respondWith(
      caches.open(RUNTIME_CACHE)
      .then(cache => {
        return fetch(event.request)
        .then(response => {
          cache.put(event.request, response.clone());
          return response;
        })
        .catch(() => caches.match(event.request));
      })
    );
    return;
  }

  // handle runtime GET requests for data from /api routes
  if (event.request.url.includes("/api/images")) {
    // make network request and fallback to cache if network request fails (offline)
    event.respondWith(
      caches.open(RUNTIME_CACHE)
      .then(cache => {
        return fetch(event.request)
        .then(response => {
          cache.put(event.request, response.clone());
          return response;
        })
        .catch(() => caches.match(event.request));
      })
    );
    return;
  }

  // use cache first for all other requests for performance
  event.respondWith(
    caches.match(event.request).then(cachedResponse => {
      if (cachedResponse) {
        return cachedResponse;
      }

      // request is not in cache. make network request and cache the response
      return caches.open(RUNTIME_CACHE).then(cache => {
        return fetch(event.request).then(response => {
          return cache.put(event.request, response.clone()).then(() => {
            return response;
          });
        });
      });
    })
  );
});
